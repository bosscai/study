import com.example.test.InjectTransform

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.tencent.tinker.patch'
//    id 'com.example.firstplugin'
}

def bakPath = file("${buildDir}/bakApk/")
ext {
    tinkerOldApkPath = "${bakPath}/app-debug-0828-16-49-10.apk"
}

repositories {
    google()
    mavenCentral()
    maven {
        url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public'
    }
}
println("==================")
println(isModule)
println(USER_NAME)

task sys {
    println("*******")
    println(System.getProperties())
}
android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.example.test"
        minSdk 26
        targetSdk 30
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
        ndkVersion "23.1.7779620"
        registerTransform(new InjectTransform())
    }
//变种，打马甲包使用
//    flavorDimensions "CCX"
//    productFlavors {
//        app1{
//            applicationId "com.example.test1"
//            resValue "string", "app_name", "demo"
//            manifestPlaceholders = [app_icon : "@drawable/beauty_1.png"]
//        }
//        app2{
//            applicationId "com.example.test2"
//            resValue "string", "app_name", "demo1"
//            manifestPlaceholders = [app_icon : "@drawable/beauty_2.png"]
//        }
//    }

    lintOptions{
        abortOnError false
        checkReleaseBuilds false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "NAME", '"CCX_RELEASE"')
        }
        debug {
            buildConfigField("String", "NAME", '"CCX_DEBUG"')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

tinkerPatch {
    /**
     * necessary，default 'null'
     * the old apk path, use to diff with the new apk to build
     * add apk from the build/bakApk
     */
    oldApk = getOldApkPath()

    buildConfig {
        tinkerId = getTinkerIdValue()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation('com.alibaba:fastjson:2.0.34')
// https://mvnrepository.com/artifact/com.google.code.gson/gson
    //引入gson为了与项目中的保持一致
    implementation 'com.google.code.gson:gson:2.8.9'
    // https://mvnrepository.com/artifact/com.github.bumptech.glide/glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
//    implementation 'com.squareup.okhttp3:okhttp:3.9.0'
    // https://mvnrepository.com/artifact/org.greenrobot/eventbus
//    implementation 'org.greenrobot:eventbus:3.3.1'
    // https://mvnrepository.com/artifact/com.squareup.leakcanary/leakcanary-android
//    implementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'

    //插桩相关业务
//    implementation(project(':utils'))
    //热修复
    implementation "com.tencent.tinker:tinker-android-anno:$tinker_version"
    implementation "com.tencent.tinker:tinker-android-lib:$tinker_version"
    //
    implementation "androidx.media:media:1.2.0"

    implementation(project(':nativelib'))
}

allprojects {
    configurations.all {
        resolutionStrategy {
            force "androidx.core:core:1.3.0"
        }
    }
}

task lintCheck() {
    println("lintCheck")
    getAllTasks(true).each {
        def lintTasks = it.value.findAll { it.name.contains("lint") }
        lintTasks.each {
            it.enabled = false
        }
    }
}

def makeJar() {
    println("makeJar works")
    def classFilePath = 'src/main/java/com/example/test/classloader/impl/DexImpl.java'
    // 定义要打包的class路径
    def jarFilePath = 'libs/DexImpl.jar'
    exec {
        //jar -cf xx.jar xx.class
        commandLine "jar", "-cvf", jarFilePath, classFilePath
    }
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

task test2() {
    println("test2222")
    println(getOldApkPath())
}